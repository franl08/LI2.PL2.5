<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="logica__do__programa_8h" kind="file" language="C++">
    <compoundname>logica_do_programa.h</compoundname>
    <includes refid="listas_8h" local="yes">listas.h</includes>
    <includedby refid="camada__de__interface_8c" local="yes">camada_de_interface.c</includedby>
    <includedby refid="logica__do__programa_8c" local="yes">logica_do_programa.c</includedby>
    <incdepgraph>
      <node id="37">
        <label>listas.h</label>
        <link refid="listas_8h"/>
      </node>
      <node id="36">
        <label>logica_do_programa.h</label>
        <link refid="logica__do__programa_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="logica__do__programa_8h_1a53472e75f056ceb02b5387193021838a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jogar</definition>
        <argsstring>(ESTADO *estado, COORDENADA c)</argsstring>
        <name>jogar</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>estado</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Funções relacionadas à lógica do programa. </para>        </briefdescription>
        <detaileddescription>
<para>Função para jogar <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>estado</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o Estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="20" column="1" bodyfile="logica_do_programa.c" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a1a37a3c530ad08eb3f6f5bb0674caa32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verificaJogada</definition>
        <argsstring>(ESTADO *e, COORDENADA c)</argsstring>
        <name>verificaJogada</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função para verificar se uma jogada é possível. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o Estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro 1 se a jogada for possível, 0 em caso contrário </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="28" column="1" bodyfile="logica_do_programa.c" bodystart="16" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a316e652f244df13f941c813ae7b4940f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verifica_Vitoria_Jog1</definition>
        <argsstring>(COORDENADA c, int minimax)</argsstring>
        <name>verifica_Vitoria_Jog1</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minimax</declname>
        </param>
        <briefdescription>
<para>Função que verifica se o jogador 1 venceu. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimax</parametername>
</parameternamelist>
<parameterdescription>
<para>0 ou 1 dependendo se é necessário dar print </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro 1 se venceu, 0 em caso contrário </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="38" column="1" bodyfile="logica_do_programa.c" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a9283caa7dbdcd81622412d09151babf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verifica_Vitoria_Jog2</definition>
        <argsstring>(COORDENADA c, int minimax)</argsstring>
        <name>verifica_Vitoria_Jog2</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minimax</declname>
        </param>
        <briefdescription>
<para>Função que verifica se o jogador 2 venceu. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimax</parametername>
</parameternamelist>
<parameterdescription>
<para>0 ou 1 dependendo se é necessário dar print </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro 1 se venceu, 0 em caso contrário </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="47" column="1" bodyfile="logica_do_programa.c" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a8b341510d646820c85b1935d939bd94d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verifica_Bloqueio</definition>
        <argsstring>(ESTADO *e, COORDENADA c)</argsstring>
        <name>verifica_Bloqueio</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função que verifica se um jogador está bloqueado, ou seja, não existe nenhuma possibilidade de efetuar uma jogada válida. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O inteiro 1 caso esteja bloqueado, 0 caso contrário </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="55" column="1" bodyfile="logica_do_programa.c" bodystart="49" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1afb5ac18f8e1659018f8b247d2e708e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int distancia_a_1</definition>
        <argsstring>(COORDENADA *c)</argsstring>
        <name>distancia_a_1</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função auxiliar para calcular a distância euclidiana até à posição 1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A distância à posição 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="62" column="1" bodyfile="logica_do_programa.c" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a364b4d622a599f1c739346a45334cb57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int distancia_a_2</definition>
        <argsstring>(COORDENADA *c)</argsstring>
        <name>distancia_a_2</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função auxiliar para calcular a distância euclidiana até à posição 2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A distância à posição 2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="69" column="1" bodyfile="logica_do_programa.c" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a53b707ec54825ec718f23293b62d0793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
        <definition>COORDENADA* euristica</definition>
        <argsstring>(ESTADO *e, LISTA L)</argsstring>
        <name>euristica</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista de posições possíveis </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A posição para a qual se pode mover de modo a ficar mais perto do objetivo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="77" column="1" bodyfile="logica_do_programa.c" bodystart="131" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1aa09f509bec3d879dd425ef1ce9fd47fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA armazena_posicoes</definition>
        <argsstring>(CASA tab[8][8], LISTA L, COORDENADA *posicoes)</argsstring>
        <name>armazena_posicoes</name>
        <param>
          <type><ref refid="camada__de__dados_8h_1aba91601f16d4c485b2d9b8c429f27039" kindref="member">CASA</ref></type>
          <declname>tab</declname>
          <array>[8][8]</array>
        </param>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>posicoes</declname>
        </param>
        <briefdescription>
<para>Função para armazenar as posições possíveis de jogar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista para ser alterada com as posições possíveis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>posicoes</parametername>
</parameternamelist>
<parameterdescription>
<para>Array de posições a avaliar </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista L com todas as posições possíveis </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="86" column="1" bodyfile="logica_do_programa.c" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a75a1b71971466c0ff8580331436e1e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_LISTA</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>print_LISTA</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função para colocar no ecrã as diversas componentes de uma lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>A lista que deve ser reproduzida </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="92" column="1" bodyfile="logica_do_programa.c" bodystart="159" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a131a18f3cc23681587fa4344ee1e6f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void criaArray_posicoes</definition>
        <argsstring>(COORDENADA a, COORDENADA *array)</argsstring>
        <name>criaArray_posicoes</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Função para criar um array com as posições à volta da posição atual. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A coordenada atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array a ser preenchido </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="99" column="1" bodyfile="logica_do_programa.c" bodystart="170" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a44cb151933c38edce62b91de8f1eb03d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
        <definition>COORDENADA jog</definition>
        <argsstring>(ESTADO *e, COORDENADA pos)</argsstring>
        <name>jog</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Função para executar o comando jog. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>A posição atual </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A melhor jogada possível de forma a aproximar-se do objetivo segundo o algoritmo da distância euclidiana </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="107" column="1" bodyfile="logica_do_programa.c" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1ae3af156fcfb85bf6a7fdbe830d9f1cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int score_minimax</definition>
        <argsstring>(COORDENADA *c, int maximizingPlayer)</argsstring>
        <name>score_minimax</name>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maximizingPlayer</declname>
        </param>
        <briefdescription>
<para>Função para calcular a maximização do jogador segundo o minmax. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>A coordenada atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximizingPlayer</parametername>
</parameternamelist>
<parameterdescription>
<para>O jogador a ser maximizado </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O valor da maximização </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="115" column="1" bodyfile="logica_do_programa.c" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a9fa14d48bd047750d95ae690394726db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int minimax</definition>
        <argsstring>(CASA tab[8][8], COORDENADA *c, int depth, int maximizingPlayer, int player, int alpha, int beta)</argsstring>
        <name>minimax</name>
        <param>
          <type><ref refid="camada__de__dados_8h_1aba91601f16d4c485b2d9b8c429f27039" kindref="member">CASA</ref></type>
          <declname>tab</declname>
          <array>[8][8]</array>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maximizingPlayer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>player</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
<para>Função para aplicar a heurística minmax. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tab</parametername>
</parameternamelist>
<parameterdescription>
<para>O tabuleiro </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>A coordenada atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de camadas a analisar </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximizingPlayer</parametername>
</parameternamelist>
<parameterdescription>
<para>Jogador a maximizar, ou seja, o jogador que vai utilizar a heurística </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>Jogador adversário </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>A melhor maximização até ao moment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>A melhor minimização até ao momento </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O melhor resultado obtido na heurística </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="128" column="1" bodyfile="logica_do_programa.c" bodystart="214" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="logica__do__programa_8h_1a4203eda4416534176ea72b0b5fd69c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
        <definition>COORDENADA jog2</definition>
        <argsstring>(ESTADO *e, COORDENADA c)</argsstring>
        <name>jog2</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função para executar o comando jog2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o estado atual </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordenada atual </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A jogada que traz mais benefícios ao jogador atual e menos ao adversário segundo a heurística minmax </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logica_do_programa.h" line="137" column="1" bodyfile="logica_do_programa.c" bodystart="287" bodyend="317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Definições dos dados presentes no estado e das funções que o alteram </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>___LOGICA_DO_PROGRAMA_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>___LOGICA_DO_PROGRAMA_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="listas_8h" kindref="compound">listas.h</ref>&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a53472e75f056ceb02b5387193021838a" kindref="member">jogar</ref>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*estado,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a1a37a3c530ad08eb3f6f5bb0674caa32" kindref="member">verificaJogada</ref><sp/>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">//alter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a316e652f244df13f941c813ae7b4940f" kindref="member">verifica_Vitoria_Jog1</ref><sp/>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a9fa14d48bd047750d95ae690394726db" kindref="member">minimax</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">//alterei<sp/>esta<sp/>funçao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a9283caa7dbdcd81622412d09151babf1" kindref="member">verifica_Vitoria_Jog2</ref><sp/>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a9fa14d48bd047750d95ae690394726db" kindref="member">minimax</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a8b341510d646820c85b1935d939bd94d" kindref="member">verifica_Bloqueio</ref><sp/>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1afb5ac18f8e1659018f8b247d2e708e6f" kindref="member">distancia_a_1</ref><sp/>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*c);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a364b4d622a599f1c739346a45334cb57" kindref="member">distancia_a_2</ref><sp/>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*c);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>*<sp/><ref refid="logica__do__programa_8h_1a53b707ec54825ec718f23293b62d0793" kindref="member">euristica</ref><sp/>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="logica__do__programa_8h_1aa09f509bec3d879dd425ef1ce9fd47fd" kindref="member">armazena_posicoes</ref>(<ref refid="camada__de__dados_8h_1aba91601f16d4c485b2d9b8c429f27039" kindref="member">CASA</ref><sp/>tab[8][8],<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*posicoes);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a75a1b71971466c0ff8580331436e1e93" kindref="member">print_LISTA</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a131a18f3cc23681587fa4344ee1e6f40" kindref="member">criaArray_posicoes</ref>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>a,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>*<sp/>array);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/><ref refid="logica__do__programa_8h_1a44cb151933c38edce62b91de8f1eb03d" kindref="member">jog</ref><sp/>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/><sp/>*e,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>pos);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1ae3af156fcfb85bf6a7fdbe830d9f1cc5" kindref="member">score_minimax</ref><sp/>(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*c<sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maximizingPlayer<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logica__do__programa_8h_1a9fa14d48bd047750d95ae690394726db" kindref="member">minimax</ref><sp/>(<ref refid="camada__de__dados_8h_1aba91601f16d4c485b2d9b8c429f27039" kindref="member">CASA</ref><sp/>tab[8][8]<sp/>,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maximizingPlayer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/><ref refid="logica__do__programa_8h_1a4203eda4416534176ea72b0b5fd69c88" kindref="member">jog2</ref><sp/>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="logica_do_programa.h"/>
  </compounddef>
</doxygen>
